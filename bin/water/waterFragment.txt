#version 400 core

in vec4 clipSpace;
in vec2 textureCoords;
in vec3 toCameraVector;
in vec3 fromLightVector;

out vec4 out_Color;

uniform sampler2D reflectionTexture;
uniform sampler2D refractionTexture;
uniform sampler2D dudvMap;
uniform sampler2D normalMap;
uniform vec3 lightColour;

uniform float moveFactor;

const float waveStrength = 0.02;
const float shineDamper = 20.0;
const float reflectivity = 0.6;

void main(void) {
	
	vec2 ndc = (clipSpace.xy/clipSpace.w)/2.0 + 0.5;
	vec2 refractionTexCoords = vec2(ndc.x,ndc.y);
	vec2 reflectionTexCoords = vec2(ndc.x,-ndc.y);
		
	vec2 distortedTexCoords = texture(dudvMap, vec2(textureCoords.x + moveFactor, textureCoords.y)).rg*0.1;
	distortedTexCoords = textureCoords + vec2(distortedTexCoords.x, distortedTexCoords.y+moveFactor);
	vec2 totalDistortion = (texture(dudvMap, distortedTexCoords).rg * 2.0 - 1.0) * waveStrength;
	
	refractionTexCoords += totalDistortion;
	refractionTexCoords = clamp(refractionTexCoords,0.001,0.999);
	
	reflectionTexCoords += totalDistortion;
	reflectionTexCoords.x = clamp(reflectionTexCoords.x,0.001,0.999);
	reflectionTexCoords.y = clamp(reflectionTexCoords.y,-0.999,-0.001);
		
	vec4 reflectColour = texture(reflectionTexture, reflectionTexCoords);
	vec4 refractColour = texture(refractionTexture, refractionTexCoords);
	
	vec3 viewVector = normalize(toCameraVector);
	float refractiveFactor = dot(viewVector, vec3(0.0,1.0,0.0));
	refractiveFactor = pow(refractiveFactor,0.5f);
	
	vec4 normalMapColour = texture(normalMap, distortedTexCoords);
	vec3 normal = vec3(normalMapColour.r * 2 -1, normalMapColour.b, normalMapColour.g * 2 -1);
	normal = normalize(normal);
	
	vec3 reflectedLight = reflect(normalize(fromLightVector), normal);
	float specular = max(dot(reflectedLight, viewVector), 0.0);
	specular = pow(specular, shineDamper);
	vec3 specularHighlights = lightColour * specular * reflectivity;
	
	out_Color = mix(reflectColour,refractColour,refractiveFactor);
	out_Color = mix(out_Color, vec4(0.0,0.3,0.3,1.0), 0.2) + vec4(specularHighlights, 0.0);
}